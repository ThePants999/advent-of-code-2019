#![allow(clippy::cast_sign_loss)]
#![allow(clippy::cast_precision_loss)]
#![allow(clippy::cast_possible_truncation)]
#![allow(clippy::cast_possible_wrap)]

use std::collections::{HashSet, VecDeque};
use std::hash::{Hash, Hasher};

// This solution uses a straightforward breadth-first search.  In part 2, the locations of the
// other robots form part of the state, and whenever the active robot encounters a key, we add
// the other robots to the queue.  This results in a tonne of branching - we evaluate over forty
// million states before we're done - so fast it is NOT.  But it gets there in the end - a little
// under 3 minutes on my box :-)
//
// Sadly I'm not particularly interested in learning more of the theory behind these sorts of
// problems, so I'm sticking with that rather than investing any more into this one!

const HEIGHT: usize = 81;
const WIDTH: usize = 81;
type Grid = [[char; HEIGHT]; WIDTH];
const DIRS_X: [isize; 4] = [0, 1, 0, -1];
const DIRS_Y: [isize; 4] = [-1, 0, 1, 0];

const PART_1_INPUT: &str =
"#################################################################################
#.....#.#...#...........Z...........#...#.......#...#...........#.........#.....#
#.###.#.#.#.#.###########.#########.###.#.#####.#.#.#.#.#######.#####.###.#.###.#
#.#.....#.#.#.#b#.......#...#...#.#...#.#.#...#...#.#.#...#...#...#...#.#.#...#.#
#M#######.#.#.#.#.###.#####.#.#.#.###.#.#.###.#####.#.###.#.#.###.#.###.#.###.#.#
#.........#.#.#.#...#.....#.#.#.....#.#.#...#.....#.....#.#.#...#...#.....#...#.#
#.#########.#.#.###.#####.#.#.#####.#.#.###.#.###.#######.#.###.#####.#####.###.#
#...#.....#...#.....#.....#.#.....#.#...#.#.#.#.....#...#.#.#.#.....#.....#.#.#.#
###.###.#.###########.###.#.#####.#####.#.#.#.#######.#.#.#.#.###.#######.#.#.#.#
#...#.T.#.#...........#...#.....#.......#.#.#...#.....#...#.#...#.......#...#.#.#
#.###.###.#.###########.#######.###.#####.#.###.#.#########.###.#######.#####.#.#
#.....#.#.#.#.........#.#.....#...#.#...#.......#...#.....#.#.........#i....#...#
#######.#.#.#.#######.#.#.###.###.#.#.#.###########.#.###.#.#.#######.###.###.###
#.#.....#.#.#...#.....#.#.#.#.#...#.#.#.#.........#.#.#.#...#.....#.#.#...#...#.#
#.#.#.###.#V###.#.#######.#.#.#.###.#.#.#.#######.#.#.#.#########.#.#.#.###.###.#
#...#.......#.#.#.....#...#...#.#...#.#.#a#.........#.........#...#.#.#.....#...#
###########.#.#.#####.#.###.###.#.#####.#.###################.#.###.#.#######.###
#.....#...#.#.#.#...#.#.#.#...#.#...#...#.#.....#...........#.#...#.#.#........e#
#.###.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.###.#######.#.###.###.#.#.#########.#
#...#...#.#...#.#.#.....#...#.#.#.....#.#.#.#.#.......#.#.........#.....#.......#
###.#####.###.#.#########.#.#.#.#######.#.#.#.#######.#.###############.#.#######
#.#.#.....#...#.....#.#...#.#.#.......#.#.#...#...#...#.#...#.#.....#..w#.#.....#
#.#.#.#############.#.#.###.#.#####.#.###Q###.#.#.#.###.###.#.#.###.#.###.#.###.#
#.#.#.............#...#.#...#.....#.#...#.....#.#...#.......#.#.#...#.....#.#.#.#
#.#.#############.#####.#.#######.#.###.#.#####.###.#######.#.#.###.###.###.#.#.#
#.#.#.........#.#.......#.#.......#...#.#.#...#.#...#.....#.#.#...#...#.#...#.#.#
#.#.#.#.#####.#.###.#####.#.###########.#.###.#.#####.###.#.#.#.#.###.###.###.#.#
#.#.#.#.#x..#...#.#.#...#.#...#.........#.....#.#.....#.#.#.#.#.#...#s..#.#.#...#
#.#.#.###.#.###.#.#.#.#.#####.#.#.#.#####.#####.#.#####.#.###.#####.###.#.#.#.###
#.#.#...#.#...#...#...#.......#.#.#.#...#.#.....#.....#.#...#.......#.#...#.#...#
#.#.#.#.#.###.###################.###.#.#.#.###.#####.#.###.#########.#####.###.#
#...#.#...#.#.............#.....#...#.#.#.#.#.....#...#...#...#.......#.....#...#
#.###.#####.#######.#####.###.#.#.#.#.#.#.#.#.#####.###.#.#.###.#.###.#.###.#.###
#...#.......#...#...#.#.C.#...#.#.#...#.#.#.#.#...#...#.#.#.....#.#...#.#...#.#.#
###.#######.###.#.###.#.###.###.#######.#.#.###.#.###.#.#.#######.#.###.#####.#.#
#.#...#.....#...#.#.....#.....#...#...#.#.#...#.#.....#.#...#...#.#.#...#...#...#
#.###.#.#####.#.#.###.#######.###.#.#.#.#.###.#.#######.###.#.#.#.#.#.###.#.###.#
#...#.#.......#.#...#...#...#.#...#.#...#...#.#.#...#...#.#.#.#.#.#...#...#...#.#
#.#.#.#############.###.#.#.#.#.###.###.###.#.#.#.#.###.#.#.###.#.#####.###.###.#
#.#.................#.....#...#.....#.......#.....#.....#.......#.........#.....#
#######################################.@.#######################################
#h#.......#.#...........#.......#.#.................#.......#......c....#.#.....#
#.#.###.#.#.#.#####.###.#.#####F#.#.#.#####.###.#####.#.#####.#.#######.#.#.#.#.#
#.#...#.#...#l..J.#.#.L.#.#.#...#...#...#...#...#.....#.......#.#.....#...#.#.#.#
#O###.#.#########.#.#####.#.#.#########.#.#######.#############.#.###.#####.#.###
#.#...#....j..#...#.....#f..#.#.........#q#.....#...#...#.....#.#.#.#.......#...#
#.#.#######.###.#######.#.###.#.#######.#.#.###.###.#.#.#####.#.#.#.#########.#.#
#.#.#.....#...#.#.....#...#..k#.#.....#.#...#.#.....#.#.....#.#...#.#...#...#.#.#
#.#.#.###.###.#.###.#######.###.###.#.#.#.###.#######.#####.#.#####.#.#.#.#.###.#
#.#.#...#...#...#...#.......#.....#.#...#.....#.......#.......#.....#.#...#.#...#
#.#.###.###.#####.#.#K###########.###.#######.#.#####.#######.###.###.#####.#.###
#.#.#...#.#...#...#.#....d#.....#...#...#...#.#.#...#.....#.#.#...#...#...#.#...#
#.#.#.###.###.###.#######.#.###D###.#####.#.#.###.#.#.###.#.#.#.#.#.#####.#.###.#
#...#...#...#...#.#.....#.....#...#.....#.#.#.....#.#...#.#..u..#.#.#...#.....X.#
#.###.#.#.#####.#.#.###P###.#####.#####.#.#########.###.#.#########.#.#.#######.#
#.#.E.#.#.........#g#.#...#.#...#...#...#.........#.#...#.#.......#...#...#v..#.#
#.#####.#H#########.#.###.#.#.#.###.#.###.#.#######.#.###.#.#####.#.#####.#.#.###
#..o..#.#.#.....#...#p....#.#.#..y..#...#.#.#.....#.#...#.#.....#.#.#...#...#...#
#####.#.###.###.#.###.#######.#########.###.#.###.#.#####.#####.#.#.#.#.#######.#
#.....#...#...#.#...#.......Y.#.......#.#...#...#.#...#...#.#...#.#.#.#.....#...#
#.#######.#.###.###.###########.#####.#.#.#####.#.###.#.#.#.#.###.#.#.#####.#.###
#...#...#...#.....#.#...#...........#...#.#.....#.#...#.#...#.#.#.#.#.....#...#.#
###.#.#.#####.###.#.###.###########.###.#.#.#####.#.###.###.###.#.#.#####.#####.#
#.#...#.W.....#...#...#.#.........#...#.#...#.....#.#.#...#...B.#.#.#.#...#.....#
#.#############.###G###N#.#######.#.#.#.#####.#####A#.#.#.#####.#.#.#.#.###.#####
#.....R...#.U.#.#...#...#.#..m..#.#.#.#.#.....#.....#.#.#...#...#.#...#..r#.....#
#.###.#####.#.#.#.###.###.#.###.#.#.#.###.###.#.#####.#.###.###.#.#######.#.###.#
#.#...#...#.#...#..n..#...#...#.#.#z#...#.#.#.#.....#.....#...#.#.......#.#.#...#
###.###.#.#.#############.#.#.###.#####.#.#.#.#####.#########.#.#######.#.#.#.###
#...#...#...#.......#.....#.#...#.......#.#.......#.......#...#.....#.#...#.#...#
#.###.#######.#####.#.#########.#######.#.#######.#######.#.#######.#.#####.###.#
#...#.#.....#.....#.#...#.....#...#...#.#...#.....#.....#.#.......#.....#...#...#
#.#.#S#.###.#####.#.#.#.#.###.###.#.#.#.#.#.#.#######.###.#.#####.#####.#.###.#.#
#.#.#.#.#.#.......#.#.#...#.#...#...#...#.#.#...#.....#...#.....#.....#.#.#...#.#
###.#.#.#.#########.#.#####.###.#.#########.###.###.###.#######.#####.###.#.###.#
#.I.#.#.#.....#...#.#.........#.#...#...#...#.#.....#...#...#...#...#.....#.#.#.#
#.#.#.#.#.#.###.#.#.###########.###.###.#.###.#.#####.###.#.###.#.#.#######.#.#.#
#.#.#...#.#.....#...#.........#...#.....#.#.....#.....#...#...#.#.#.....#...#...#
#.#######.###########.#######.###.#####.#.#######.#####.#####.###.#####.#.###.###
#.....................#...........#.....#...............#.........#....t..#.....#
#################################################################################";

const PART_2_INPUT: &str =
    "#################################################################################
#.....#.#...#...........Z...........#...#.......#...#...........#.........#.....#
#.###.#.#.#.#.###########.#########.###.#.#####.#.#.#.#.#######.#####.###.#.###.#
#.#.....#.#.#.#b#.......#...#...#.#...#.#.#...#...#.#.#...#...#...#...#.#.#...#.#
#M#######.#.#.#.#.###.#####.#.#.#.###.#.#.###.#####.#.###.#.#.###.#.###.#.###.#.#
#.........#.#.#.#...#.....#.#.#.....#.#.#...#.....#.....#.#.#...#...#.....#...#.#
#.#########.#.#.###.#####.#.#.#####.#.#.###.#.###.#######.#.###.#####.#####.###.#
#...#.....#...#.....#.....#.#.....#.#...#.#.#.#.....#...#.#.#.#.....#.....#.#.#.#
###.###.#.###########.###.#.#####.#####.#.#.#.#######.#.#.#.#.###.#######.#.#.#.#
#...#.T.#.#...........#...#.....#.......#.#.#...#.....#...#.#...#.......#...#.#.#
#.###.###.#.###########.#######.###.#####.#.###.#.#########.###.#######.#####.#.#
#.....#.#.#.#.........#.#.....#...#.#...#.......#...#.....#.#.........#i....#...#
#######.#.#.#.#######.#.#.###.###.#.#.#.###########.#.###.#.#.#######.###.###.###
#.#.....#.#.#...#.....#.#.#.#.#...#.#.#.#.........#.#.#.#...#.....#.#.#...#...#.#
#.#.#.###.#V###.#.#######.#.#.#.###.#.#.#.#######.#.#.#.#########.#.#.#.###.###.#
#...#.......#.#.#.....#...#...#.#...#.#.#a#.........#.........#...#.#.#.....#...#
###########.#.#.#####.#.###.###.#.#####.#.###################.#.###.#.#######.###
#.....#...#.#.#.#...#.#.#.#...#.#...#...#.#.....#...........#.#...#.#.#........e#
#.###.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.###.#######.#.###.###.#.#.#########.#
#...#...#.#...#.#.#.....#...#.#.#.....#.#.#.#.#.......#.#.........#.....#.......#
###.#####.###.#.#########.#.#.#.#######.#.#.#.#######.#.###############.#.#######
#.#.#.....#...#.....#.#...#.#.#.......#.#.#...#...#...#.#...#.#.....#..w#.#.....#
#.#.#.#############.#.#.###.#.#####.#.###Q###.#.#.#.###.###.#.#.###.#.###.#.###.#
#.#.#.............#...#.#...#.....#.#...#.....#.#...#.......#.#.#...#.....#.#.#.#
#.#.#############.#####.#.#######.#.###.#.#####.###.#######.#.#.###.###.###.#.#.#
#.#.#.........#.#.......#.#.......#...#.#.#...#.#...#.....#.#.#...#...#.#...#.#.#
#.#.#.#.#####.#.###.#####.#.###########.#.###.#.#####.###.#.#.#.#.###.###.###.#.#
#.#.#.#.#x..#...#.#.#...#.#...#.........#.....#.#.....#.#.#.#.#.#...#s..#.#.#...#
#.#.#.###.#.###.#.#.#.#.#####.#.#.#.#####.#####.#.#####.#.###.#####.###.#.#.#.###
#.#.#...#.#...#...#...#.......#.#.#.#...#.#.....#.....#.#...#.......#.#...#.#...#
#.#.#.#.#.###.###################.###.#.#.#.###.#####.#.###.#########.#####.###.#
#...#.#...#.#.............#.....#...#.#.#.#.#.....#...#...#...#.......#.....#...#
#.###.#####.#######.#####.###.#.#.#.#.#.#.#.#.#####.###.#.#.###.#.###.#.###.#.###
#...#.......#...#...#.#.C.#...#.#.#...#.#.#.#.#...#...#.#.#.....#.#...#.#...#.#.#
###.#######.###.#.###.#.###.###.#######.#.#.###.#.###.#.#.#######.#.###.#####.#.#
#.#...#.....#...#.#.....#.....#...#...#.#.#...#.#.....#.#...#...#.#.#...#...#...#
#.###.#.#####.#.#.###.#######.###.#.#.#.#.###.#.#######.###.#.#.#.#.#.###.#.###.#
#...#.#.......#.#...#...#...#.#...#.#...#...#.#.#...#...#.#.#.#.#.#...#...#...#.#
#.#.#.#############.###.#.#.#.#.###.###.###.#.#.#.#.###.#.#.###.#.#####.###.###.#
#.#.................#.....#...#.....#..@#@..#.....#.....#.......#.........#.....#
#################################################################################
#h#.......#.#...........#.......#.#....@#@..........#.......#......c....#.#.....#
#.#.###.#.#.#.#####.###.#.#####F#.#.#.#####.###.#####.#.#####.#.#######.#.#.#.#.#
#.#...#.#...#l..J.#.#.L.#.#.#...#...#...#...#...#.....#.......#.#.....#...#.#.#.#
#O###.#.#########.#.#####.#.#.#########.#.#######.#############.#.###.#####.#.###
#.#...#....j..#...#.....#f..#.#.........#q#.....#...#...#.....#.#.#.#.......#...#
#.#.#######.###.#######.#.###.#.#######.#.#.###.###.#.#.#####.#.#.#.#########.#.#
#.#.#.....#...#.#.....#...#..k#.#.....#.#...#.#.....#.#.....#.#...#.#...#...#.#.#
#.#.#.###.###.#.###.#######.###.###.#.#.#.###.#######.#####.#.#####.#.#.#.#.###.#
#.#.#...#...#...#...#.......#.....#.#...#.....#.......#.......#.....#.#...#.#...#
#.#.###.###.#####.#.#K###########.###.#######.#.#####.#######.###.###.#####.#.###
#.#.#...#.#...#...#.#....d#.....#...#...#...#.#.#...#.....#.#.#...#...#...#.#...#
#.#.#.###.###.###.#######.#.###D###.#####.#.#.###.#.#.###.#.#.#.#.#.#####.#.###.#
#...#...#...#...#.#.....#.....#...#.....#.#.#.....#.#...#.#..u..#.#.#...#.....X.#
#.###.#.#.#####.#.#.###P###.#####.#####.#.#########.###.#.#########.#.#.#######.#
#.#.E.#.#.........#g#.#...#.#...#...#...#.........#.#...#.#.......#...#...#v..#.#
#.#####.#H#########.#.###.#.#.#.###.#.###.#.#######.#.###.#.#####.#.#####.#.#.###
#..o..#.#.#.....#...#p....#.#.#..y..#...#.#.#.....#.#...#.#.....#.#.#...#...#...#
#####.#.###.###.#.###.#######.#########.###.#.###.#.#####.#####.#.#.#.#.#######.#
#.....#...#...#.#...#.......Y.#.......#.#...#...#.#...#...#.#...#.#.#.#.....#...#
#.#######.#.###.###.###########.#####.#.#.#####.#.###.#.#.#.#.###.#.#.#####.#.###
#...#...#...#.....#.#...#...........#...#.#.....#.#...#.#...#.#.#.#.#.....#...#.#
###.#.#.#####.###.#.###.###########.###.#.#.#####.#.###.###.###.#.#.#####.#####.#
#.#...#.W.....#...#...#.#.........#...#.#...#.....#.#.#...#...B.#.#.#.#...#.....#
#.#############.###G###N#.#######.#.#.#.#####.#####A#.#.#.#####.#.#.#.#.###.#####
#.....R...#.U.#.#...#...#.#..m..#.#.#.#.#.....#.....#.#.#...#...#.#...#..r#.....#
#.###.#####.#.#.#.###.###.#.###.#.#.#.###.###.#.#####.#.###.###.#.#######.#.###.#
#.#...#...#.#...#..n..#...#...#.#.#z#...#.#.#.#.....#.....#...#.#.......#.#.#...#
###.###.#.#.#############.#.#.###.#####.#.#.#.#####.#########.#.#######.#.#.#.###
#...#...#...#.......#.....#.#...#.......#.#.......#.......#...#.....#.#...#.#...#
#.###.#######.#####.#.#########.#######.#.#######.#######.#.#######.#.#####.###.#
#...#.#.....#.....#.#...#.....#...#...#.#...#.....#.....#.#.......#.....#...#...#
#.#.#S#.###.#####.#.#.#.#.###.###.#.#.#.#.#.#.#######.###.#.#####.#####.#.###.#.#
#.#.#.#.#.#.......#.#.#...#.#...#...#...#.#.#...#.....#...#.....#.....#.#.#...#.#
###.#.#.#.#########.#.#####.###.#.#########.###.###.###.#######.#####.###.#.###.#
#.I.#.#.#.....#...#.#.........#.#...#...#...#.#.....#...#...#...#...#.....#.#.#.#
#.#.#.#.#.#.###.#.#.###########.###.###.#.###.#.#####.###.#.###.#.#.#######.#.#.#
#.#.#...#.#.....#...#.........#...#.....#.#.....#.....#...#...#.#.#.....#...#...#
#.#######.###########.#######.###.#####.#.#######.#####.#####.###.#####.#.###.###
#.....................#...........#.....#...............#.........#....t..#.....#
#################################################################################";

fn main() {
    let start_time = std::time::Instant::now();
    let part_1_answer = Maze::construct(PART_1_INPUT).solve().unwrap();
    let part_2_answer = Maze::construct(PART_2_INPUT).solve().unwrap();
    println!(
        "Part 1: {}\nPart 2: {}\nTime: {}ms",
        part_1_answer,
        part_2_answer,
        start_time.elapsed().as_millis()
    );
}

enum FoundKeyResult {
    Finished(usize),
    MoreToGo(String),
}

struct Maze {
    grid: Grid,
    all_keys: HashSet<char>,
    starting_locations: Vec<Location>,
    queue: VecDeque<State>,
    seen_states: HashSet<State>,
}

impl Maze {
    fn construct(input: &str) -> Self {
        let input = String::from(input);
        let mut maze = Self {
            grid: [['!'; HEIGHT]; WIDTH],
            all_keys: HashSet::new(),
            starting_locations: Vec::new(),
            queue: VecDeque::new(),
            seen_states: HashSet::new(),
        };

        for (y, line) in input.lines().enumerate() {
            for (x, c) in line.chars().enumerate() {
                maze.grid[x][y] = match c {
                    '@' => {
                        maze.starting_locations.push(Location { x, y });
                        '.'
                    }
                    door if door.is_uppercase() => door,
                    key if key.is_lowercase() => {
                        maze.all_keys.insert(key);
                        key
                    }
                    '#' => '#',
                    '.' => '.',
                    _ => panic!("Unexpected char in input"),
                };
            }
        }

        maze
    }

    fn solve(mut self) -> Option<usize> {
        self.initialise_queue();

        while !self.queue.is_empty() {
            let state = self.queue.pop_front().unwrap();
            if self.seen_states.contains(&state) {
                continue;
            }

            let location = self.grid[state.location.x][state.location.y];

            // Don't bother with bounds check - the mazes all have walls at the edges
            if location == '#' {
                // Wall
                continue;
            }
            if location.is_uppercase()
                && !state
                    .keys
                    .contains(location.to_ascii_lowercase().to_string().as_str())
            {
                // Locked door
                continue;
            }

            let keys;
            if location.is_lowercase() && !state.keys.contains(location.to_string().as_str()) {
                // Key
                match self.found_key(&state, location) {
                    FoundKeyResult::Finished(distance) => return Some(distance),
                    FoundKeyResult::MoreToGo(keys_so_far) => keys = keys_so_far,
                }
            } else {
                keys = state.keys.clone();
            }

            self.search_outwards(&state, &keys);

            self.seen_states.insert(state);
            if self.seen_states.len() % 100_000 == 0 { println!("{} - {}", self.seen_states.len(), self.queue.len()); }
        }

        None
    }

    fn initialise_queue(&mut self) {
        for i in 0..self.starting_locations.len() {
            let this_location = self.starting_locations[i];
            let mut other_locations = self.starting_locations.clone();
            other_locations.remove(i);
            other_locations.shrink_to_fit();
            self.queue.push_back(State {
                location: this_location,
                keys: String::new(),
                distance: 0,
                other_robots: other_locations,
            });
        }
    }

    fn found_key(&mut self, state: &State, key: char) -> FoundKeyResult {
        let mut keys_vec: Vec<char> = state.keys.clone().chars().collect();
        keys_vec.push(key);
        if keys_vec.len() == self.all_keys.len() {
            // We have all the keys, so we're finished.
            return FoundKeyResult::Finished(state.distance);
        }
        keys_vec.sort();
        let keys: String = keys_vec.iter().collect();

        // The correct move from here might be for one of the other robots to go next, so
        // we'll schedule each of them.
        self.release_other_robots(state, &keys);

        FoundKeyResult::MoreToGo(keys)
    }

    fn release_other_robots(&mut self, state: &State, keys: &str) {
        for i in 0..state.other_robots.len() {
            let mut other_robots = state.other_robots.clone();
            let other_loc = other_robots.remove(i);
            other_robots.push(state.location);
            self.queue.push_back(State {
                location: other_loc,
                keys: keys.to_string(),
                distance: state.distance,
                other_robots,
            });
        }
    }

    fn search_outwards(&mut self, state: &State, keys: &str) {
        for dir in 0..4 {
            let (x, y) = (
                (state.location.x as isize + DIRS_X[dir]) as usize,
                (state.location.y as isize + DIRS_Y[dir]) as usize,
            );
            self.queue.push_back(State {
                location: Location { x, y },
                keys: keys.to_string(),
                distance: state.distance + 1,
                other_robots: state.other_robots.clone(),
            });
        }
    }
}

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
struct Location {
    x: usize,
    y: usize,
}

// State _contains_ everything we need to know at any time about our progress through
// exploring the maze in a particular direction.  However, although distance is one of
// the things we need to know, it does not contribute to state uniqueness - i.e. if two
// states differ only in distance, we want to consider them duplicates and therefore
// abandon the higher-distance one.  Achieve this with custom implementations of
// PartialEq and Hash.
#[derive(Clone)]
struct State {
    location: Location,
    keys: String,
    distance: usize,
    other_robots: Vec<Location>,
}

impl PartialEq for State {
    fn eq(&self, other: &State) -> bool {
        self.location == other.location
            && self.keys == other.keys
            && self.other_robots == other.other_robots
    }
}
impl Eq for State {}

impl Hash for State {
    fn hash<H>(&self, state: &mut H)
    where
        H: Hasher,
    {
        self.location.x.hash(state);
        self.location.y.hash(state);
        self.keys.hash(state);
        for loc in &self.other_robots {
            loc.x.hash(state);
            loc.y.hash(state);
        }
    }
}
